name: Build and Test Website

on:
  pull_request_target:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_run:
    workflows: ['Approve Failed Backstop Test']
    types:
      - completed

jobs:

  npm:
    runs-on: ubuntu-latest
    name: "Download and cache npm"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
          # cache: npm
      # - run: ls
      # - run: pwd
      - uses: actions/cache@v2
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - run: npm ci
          # restore-keys: |
            # ${{ runner.os }}-node-


  build-prod:
    needs: npm
    if: ${{ (github.actor == 'dependabot[bot]' && github.event_name == 'pull_request_target') || (github.actor != 'dependabot[bot]' && github.event_name == 'pull_request')}}
    runs-on: ubuntu-latest
    name: Build PROD
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
          # cache: 'npm'
      - uses: actions/cache@v2
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - run: ls
      # - run: npm ci
      - run: npm run build
        env:
          CONTENTFUL_TOKEN: ${{secrets.CONTENTFUL_TOKEN}}
          CONTENTFUL_SPACE_ID: ${{secrets.CONTENTFUL_SPACE_ID}}
          PROD: true
          TRACKING: ${{ startsWith(github.ref, 'refs/tags/v') }}
      - name: Deploy
        uses: nwtgck/actions-netlify@v1
        id: deploy-prod
        with:
          publish-dir: './public'
          production-deploy: ${{ startsWith(github.ref, 'refs/tags/v') }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deployed prod build: ${{ github.ref }}'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: cfb311e2-904f-4acb-9937-30e50d59f3ca
    outputs:
      prod-url: ${{steps.deploy-prod.outputs.deploy-url}}

  build-dev:
    needs: npm
    if: ${{ (github.actor == 'dependabot[bot]' && github.event_name == 'pull_request_target') || (github.actor != 'dependabot[bot]' && github.event_name == 'pull_request')}}
    runs-on: ubuntu-latest
    name: Build DEV
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      # - uses: bahmutov/npm-install@v1
      #   env:
      #     NODE_ENV: production
      - uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
      - uses: actions/cache@v2
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}      
      - run: npm run build
        env:
          CONTENTFUL_TOKEN_PREVIEW: ${{secrets.CONTENTFUL_TOKEN_PREVIEW}}
          CONTENTFUL_TOKEN: ${{secrets.CONTENTFUL_TOKEN}}
          CONTENTFUL_SPACE_ID: ${{secrets.CONTENTFUL_SPACE_ID}}
          CONTENTFUL_ENV: staging
          GATSBY_VV_TEST_DATA: on
          GATSBY_BACKSTOP_READY: on
      - name: Deploy
        uses: nwtgck/actions-netlify@v1
        id: deploy-dev
        with:
          publish-dir: './public'
          production-deploy: ${{ false }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy dev build: ${{ github.ref }}'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: cfb311e2-904f-4acb-9937-30e50d59f3ca
    outputs:
      dev-url: ${{steps.deploy-dev.outputs.deploy-url}}

  # build-playwright:
  #   runs-on: ubuntu-latest
  #   name: Build Playwright Docker Image
  #   steps:
  #     - uses: actions/checkout@v2
  #     - working-directory: ./tests
  #       run: 'docker build . -t playwright-test'
  
  test:
    needs: build-dev
    runs-on: ubuntu-latest
    name: Test
    steps:
    - uses: actions/checkout@v2
    - name: Run your tests
      working-directory: ./tests
      # todo: push docker image so it doesnt need to be rebuilt every time
      run: 'docker build . -t playwright-test && docker run --rm --ipc=host -v $(pwd):/work/ -w /work/ playwright-test /bin/bash /work/run-test.sh'
    env:
      PLAYWRIGHT_TEST_BASE_URL: ${{needs.build-dev.outputs.dev-url}}

  lighthouse-check:
    needs: build-prod
    if: contains(github.event_name, 'pull_request')
    runs-on: ubuntu-latest
    name: Lighthouse Check
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v3
        with:
          urls: |
            ${{needs.build-prod.outputs.prod-url}}
          configPath: './lighthouserc.json'
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{secrets.LHCI_GITHUB_APP_TOKEN}}
