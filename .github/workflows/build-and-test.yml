name: Build and Test Website

on:
  push:
    branches-ignore:
      - 'main'

jobs:
  deps:
    runs-on: ubuntu-latest
    name: 'Download and cache dependencies'
    steps:
      - uses: actions/checkout@v3
      - uses: volta-cli/action@v3
      - uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
      - run: yarn install --frozen-lockfile

  build-prod:
    needs: deps
    runs-on: ubuntu-latest
    name: Build PROD
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: volta-cli/action@v3
      - uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
      - run: yarn build
        env:
          CONTENTFUL_TOKEN: ${{secrets.CONTENTFUL_TOKEN}}
          CONTENTFUL_SPACE_ID: ${{secrets.CONTENTFUL_SPACE_ID}}
          PROD: true
      - name: Deploy
        uses: nwtgck/actions-netlify@v1
        id: deploy-prod
        with:
          publish-dir: './public'
          production-deploy: ${{ startsWith(github.ref, 'refs/tags/v') }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deployed prod build: ${{ github.ref }}'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: cfb311e2-904f-4acb-9937-30e50d59f3ca
    outputs:
      prod-url: ${{steps.deploy-prod.outputs.deploy-url}}

  build-dev:
    needs: deps
    runs-on: ubuntu-latest
    name: Build DEV
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: volta-cli/action@v3
      - uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
      - run: yarn build:fake-vv
        env:
          CONTENTFUL_TOKEN_PREVIEW: ${{secrets.CONTENTFUL_TOKEN_PREVIEW}}
          CONTENTFUL_TOKEN: ${{secrets.CONTENTFUL_TOKEN}}
          CONTENTFUL_SPACE_ID: ${{secrets.CONTENTFUL_SPACE_ID}}
          CONTENTFUL_ENV: staging
          GATSBY_VV_TEST_DATA: on
      - name: Deploy
        uses: nwtgck/actions-netlify@v1
        id: deploy-dev
        with:
          publish-dir: './public'
          production-deploy: ${{ false }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy dev build: ${{ github.ref }}'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: cfb311e2-904f-4acb-9937-30e50d59f3ca
    outputs:
      dev-url: ${{steps.deploy-dev.outputs.deploy-url}}

  build-storybook:
    needs: deps
    runs-on: ubuntu-latest
    name: Build Storybook
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: volta-cli/action@v3
      - uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
      - run: yarn build-storybook
      - name: Deploy
        uses: nwtgck/actions-netlify@v1
        id: deploy-dev
        with:
          publish-dir: './storybook-static'
          production-deploy: ${{ false }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy storybook build: ${{ github.ref }}'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: cfb311e2-904f-4acb-9937-30e50d59f3ca
    outputs:
      dev-url: ${{steps.build-storybook.outputs.deploy-url}}

  build-test-base:
    runs-on: ubuntu-latest
    name: Build Base Docker container for tests
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if tag exists
        run: 'docker manifest inspect $IMAGE'
        env:
          IMAGE: ghcr.io/knoorsesv/playwright-base:${{ hashFiles('tests/yarn.lock') }}
      - name: Build image
        # run build if previous call returned error
        # todo: would be better with an output variable instead of relying on an error
        if: ${{ failure() }}
        working-directory: ./tests
        run: |
          docker build . -t $IMAGE && docker push $IMAGE
          docker tag $IMAGE $LATEST_IMAGE && docker push $LATEST_IMAGE
        env:
          IMAGE: ghcr.io/knoorsesv/playwright-base:${{ hashFiles('tests/yarn.lock') }}
          LATEST_IMAGE: ghcr.io/knoorsesv/playwright-base:yarn-1.0

  test:
    needs: [build-dev, build-test-base]
    runs-on: ubuntu-latest
    name: Functional Test
    container:
      image: ghcr.io/knoorsesv/playwright-base:yarn-1.0
    steps:
      - uses: actions/checkout@v3
      - run: yarn install --frozen-lockfile
        working-directory: ./tests
      - name: Run your tests
        working-directory: ./tests
        run: yarn test:func
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{needs.build-dev.outputs.dev-url}}
      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: functional-test-playwright-report
          path: tests/playwright-report

  screenshots:
    needs: [build-dev, build-test-base]
    runs-on: ubuntu-latest
    name: Visual Test
    container:
      image: ghcr.io/knoorsesv/playwright-base:yarn-1.0
    steps:
      - uses: actions/checkout@v3
      - run: yarn install --frozen-lockfile
        working-directory: ./tests
      - name: Run your tests
        working-directory: ./tests
        run: yarn test:visual
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{needs.build-dev.outputs.dev-url}}
      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: screenshot-test-playwright-report
          path: tests/playwright-report
      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: screenshot-test-test-results
          path: tests/test-results

  lighthouse-check:
    needs: build-prod
    runs-on: ubuntu-latest
    name: Lighthouse Check
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{needs.build-prod.outputs.prod-url}}
          configPath: './lighthouserc.json'
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{secrets.LHCI_GITHUB_APP_TOKEN}}
