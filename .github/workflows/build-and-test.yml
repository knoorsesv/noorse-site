name: Build and Test Website

on:
  push:
    branches-ignore:
      - 'main'

env:
  VOLTA_FEATURE_PNPM: 1

jobs:
  deps:
    runs-on: ubuntu-latest
    name: 'Download and cache dependencies'
    steps:
      - uses: actions/checkout@v4
      - uses: volta-cli/action@v4
      - uses: actions/cache@v4
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm install --frozen-lockfile

  build-prod:
    needs: deps
    runs-on: ubuntu-latest
    name: Build PROD
    steps:
      - uses: actions/checkout@v4
      - uses: volta-cli/action@v4
      - uses: actions/cache@v4
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm build
        env:
          CONTENTFUL_TOKEN: ${{secrets.CONTENTFUL_TOKEN}}
          CONTENTFUL_SPACE_ID: ${{secrets.CONTENTFUL_SPACE_ID}}
          PROD: true
      - name: Deploy
        uses: nwtgck/actions-netlify@v3
        id: deploy-prod
        with:
          publish-dir: './dist'
          production-deploy: ${{ startsWith(github.ref, 'refs/tags/v') }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deployed prod build: ${{ github.ref }}'
          enable-commit-comment: true
          github-deployment-description: 'Prod'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: cfb311e2-904f-4acb-9937-30e50d59f3ca
    outputs:
      prod-url: ${{steps.deploy-prod.outputs.deploy-url}}

  build-dev:
    needs: deps
    runs-on: ubuntu-latest
    name: Build DEV
    steps:
      - uses: actions/checkout@v4
      - uses: volta-cli/action@v4
      - uses: actions/cache@v4
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm build:dev
        env:
          CONTENTFUL_TOKEN_PREVIEW: ${{secrets.CONTENTFUL_TOKEN_PREVIEW}}
          CONTENTFUL_TOKEN: ${{secrets.CONTENTFUL_TOKEN}}
          CONTENTFUL_SPACE_ID: ${{secrets.CONTENTFUL_SPACE_ID}}
          CONTENTFUL_ENV: staging
      - name: Deploy
        uses: nwtgck/actions-netlify@v3
        id: deploy-dev
        with:
          publish-dir: './dist'
          production-deploy: ${{ false }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy dev build: ${{ github.ref }}'
          enable-commit-comment: false
          github-deployment-description: 'Dev'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: cfb311e2-904f-4acb-9937-30e50d59f3ca
    outputs:
      dev-url: ${{steps.deploy-dev.outputs.deploy-url}}

  lint:
    needs: deps
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: volta-cli/action@v4
      - uses: actions/cache@v4
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm lint

  # todo: maybe reenable this when chromatich subscription runs out?
  # build-storybook:
  #   needs: deps
  #   runs-on: ubuntu-latest
  #   name: Build Storybook
  #   steps:
  #     - uses: actions/checkout@v4
  #       # with:
  #       #   ref: ${{ github.event.pull_request.head.sha }}
  #     - uses: volta-cli/action@v4
  #     - uses: actions/cache@v3
  #       with:
  #         path: ./node_modules
  #         key: ${{ runner.os }}-node-${{ hashFiles('pnpm-lock.yaml') }}
  #     - run: pnpm build-storybook
  #     - name: Deploy
  #       uses: nwtgck/actions-netlify@v2
  #       id: deploy-storybook
  #       with:
  #         publish-dir: './storybook-static'
  #         production-deploy: ${{ false }}
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         deploy-message: 'Deploy storybook build: ${{ github.ref }}'
  #         enable-commit-comment: false
  #       env:
  #         NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  #         NETLIFY_SITE_ID: cfb311e2-904f-4acb-9937-30e50d59f3ca
  #   outputs:
  #     dev-url: ${{steps.build-storybook.outputs.deploy-url}}

  build-test-base:
    runs-on: ubuntu-latest
    name: Build Base Docker container for tests
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if tag exists
        run: 'docker manifest inspect $IMAGE'
        env:
          IMAGE: ghcr.io/knoorsesv/playwright-base:${{ hashFiles('tests/pnpm-lock.yaml', 'tests/Dockerfile') }}
      - name: Build image
        # run build if previous call returned error
        # todo: would be better with an output variable instead of relying on an error
        if: ${{ failure() }}
        working-directory: ./tests
        run: |
          docker build . -t $IMAGE && docker push $IMAGE
          docker tag $IMAGE $LATEST_IMAGE && docker push $LATEST_IMAGE
        env:
          IMAGE: ghcr.io/knoorsesv/playwright-base:${{ hashFiles('tests/pnpm-lock.yaml', 'tests/Dockerfile') }}
          LATEST_IMAGE: ghcr.io/knoorsesv/playwright-base:pnpm-1.0

  test:
    needs: [build-dev, build-test-base]
    runs-on: ubuntu-latest
    name: Functional Test
    container:
      image: ghcr.io/knoorsesv/playwright-base:pnpm-1.0
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
        working-directory: ./tests
      - name: Run your tests
        working-directory: ./tests
        run: pnpm test:func
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{needs.build-dev.outputs.dev-url}}
      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: functional-test-playwright-report
          path: tests/playwright-report

  screenshots:
    needs: [build-dev, build-test-base]
    runs-on: ubuntu-latest
    name: Visual Test
    container:
      image: ghcr.io/knoorsesv/playwright-base:pnpm-1.0
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
        working-directory: ./tests
      - name: Run your tests
        working-directory: ./tests
        run: pnpm test:visual
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{needs.build-dev.outputs.dev-url}}
      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: screenshot-test-playwright-report
          path: tests/playwright-report
      - uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: screenshot-test-test-results
          path: tests/test-results

  chromatic:
    runs-on: ubuntu-latest
    name: Chromatic Storybook Test
    needs: [build-dev, build-prod, lint]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: volta-cli/action@v4
      - run: pnpm install --frozen-lockfile
      - name: Publish to Chromatic
        uses: chromaui/action@v11
        # Chromatic GitHub Action options
        with:
          # ðŸ‘‡ Chromatic projectToken, refer to the manage page to obtain it.
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

  lighthouse-check:
    needs: build-prod
    runs-on: ubuntu-latest
    name: Lighthouse Check
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            ${{needs.build-prod.outputs.prod-url}}
          configPath: './lighthouserc.json'
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{secrets.LHCI_GITHUB_APP_TOKEN}}
