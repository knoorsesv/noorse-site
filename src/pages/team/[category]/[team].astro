---
import Layout from '../../../layouts/Layout.astro'
import { TeamPage } from '../../../react/pages'
import { contentfulClient } from '../../../lib/contentful'
import calendarConfig from '../../../../data/calendar-config.json'
import vvData from '../../../../data/vv-responses.json'
import testVvData from '../../../../data/test-vv-responses.json'
import type { EntryFieldTypes } from 'contentful'

interface Category {
  contentTypeId: 'ploeg'
  fields: {
    naam: EntryFieldTypes.Text
  }
}

interface TeamEntry {
  contentTypeId: 'ploeg'
  fields: {
    naam: EntryFieldTypes.Text
    naamOpVoetbalVlaanderen: EntryFieldTypes.Text
    categorie: EntryFieldTypes.EntryResourceLink<Category>
    logo: EntryFieldTypes.AssetLink
  }
}

export async function getStaticPaths() {
  const typedData: {
    teamSeriesAndRankings: Record<
      string,
      { series?: any[]; rankings: null | any[]; __typename: string }
    >
    teamCalendar: Record<string, Object>
  } = import.meta.env.CONTENTFUL_ENV === 'master' ? vvData : testVvData

  const teams = (
    await contentfulClient.withoutUnresolvableLinks.getEntries<TeamEntry>({
      content_type: 'ploeg',
    })
  ).items

  return teams
    .map(({ fields }) => fields)
    .map((team) => {
      const config = calendarConfig.find(
        ({ vvName }) =>
          vvName === team.naamOpVoetbalVlaanderen || vvName === team.naam
      )
      const vvId = config?.vvId

      return {
        params: {
          category: team.categorie?.fields.naam?.toLowerCase(),
          team: team.naam?.toLowerCase(),
        },
        props: {
          ploeg: {
            ...team,
            categorie: {
              naam: team.categorie?.fields.naam,
              ploeg: teams
                .map(({ fields }) => fields)
                .filter(
                  (teamToFilter) =>
                    teamToFilter.categorie?.fields.naam ===
                    team.categorie?.fields.naam
                ),
            },
          },
          rankings: vvId && typedData.teamSeriesAndRankings[vvId]?.rankings,
          series: vvId && typedData.teamSeriesAndRankings[vvId]?.series,
          teamCalendar: vvId && typedData.teamCalendar[vvId],
          googleCalId: config?.calendarId,
        },
      }
    })
}

const { teamName } = Astro.params
const { ploeg, rankings, series, teamCalendar, googleCalId } = Astro.props
---

<Layout title={teamName}>
  <TeamPage
    ploeg={ploeg}
    rankings={rankings}
    series={series}
    teamCalendar={teamCalendar}
    googleCalId={googleCalId}
  />
</Layout>
