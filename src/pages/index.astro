---
import { HomePage } from '../react/pages'
import Page from '../layouts/Page.astro'
import { contentfulClient } from '../lib/contentful'
import type { EntryFieldTypes } from 'contentful'
import { isFuture, parse } from 'date-fns'
import { newsletterLink, siteMap, webshopLink } from '../env/constants'
import { siteMetadata } from '../data/siteMetadata'
import type { Event } from '../react/types/event'
import type { NewsItem } from '../react/types/news'

interface Sponsor {
  contentTypeId: 'sponsor'
  fields: {
    naam: EntryFieldTypes.Text
    websiteUrl: EntryFieldTypes.Text
    logo: EntryFieldTypes.AssetLink
  }
}
interface Category {
  contentTypeId: 'categorie'
  fields: {
    naam: EntryFieldTypes.Text
  }
}

// todo: same as in layout, could be extracted
const sponsors = (
  await contentfulClient.withoutUnresolvableLinks.getEntries<Sponsor>({
    content_type: 'sponsor',
  })
).items.map(({ fields }) => ({
  naam: fields.naam,
  websiteUrl: fields.websiteUrl,
  logo: {
    responsiveURL:
      // todo: extract this mapping for all assetlink types
      fields.logo?.fields.file?.url.replace('//', 'https://') +
      '?w=300&h=200&fm=jpg&fl=progressive',
  },
}))

// todo: same as in niuws.astro, could be extracted
interface ContentfulNewsItem {
  contentTypeId: 'news'
  fields: {
    title: EntryFieldTypes.Text
    inhoud: EntryFieldTypes.Text
    blurb: EntryFieldTypes.Text
    attachment: EntryFieldTypes.AssetLink
    image: EntryFieldTypes.AssetLink
    category: EntryFieldTypes.EntryResourceLink<Category>
  }
}

// todo: could be limited by a query instead of fetching everything and then limiting
const newsItems: NewsItem[] = (
  await contentfulClient.withoutUnresolvableLinks.getEntries<ContentfulNewsItem>(
    {
      content_type: 'news',
    }
  )
).items
  .map(({ fields, sys }) => ({
    // ...fields,
    title: fields.title,
    inhoud: fields.inhoud,
    blurb: fields.blurb,
    categoryName: fields.category?.fields.naam || '',
    createdAt: sys.createdAt,
    category: { naam: fields.category?.fields.naam },
    ...(fields.image && {
      image: {
        responsiveURL:
          fields.image.fields.file?.url.replace('//', 'https://') +
          '?w=300&h=200&fm=webp',
      },
    }),
  }))
  .slice(0, 3)

interface EventEntryType {
  contentTypeId: 'evenement'
  fields: {
    naam: EntryFieldTypes.Text
    datum: string // actually dd/MM/yy - doesnt match EntryFieldTypes.Date
  }
}

// todo: two conditions because contentful API returns different formats for different environments, should be fixed there
const eventIsInfuture = (datum: string): boolean =>
  isFuture(parse(datum, 'dd/MM/yy', new Date())) ||
  isFuture(parse(datum, 'yyyy-MM-dd', new Date()))

const events: Event[] = (
  await contentfulClient.getEntries<EventEntryType>({
    content_type: 'evenement',
  })
).items
  .map((item) => ({
    datum: item.fields.datum,
    naam: item.fields.naam,
  }))
  .filter((item) => {
    return eventIsInfuture(item.datum)
  })
  .sort((a, b) => new Date(a.datum).getTime() - new Date(b.datum).getTime())

const links = { newsletterLink, webshopLink }
const version = siteMetadata.version
---

<Page title="Home">
  <HomePage
    siteMap={siteMap}
    events={events}
    links={links}
    newsItems={newsItems}
    version={version}
    sponsors={sponsors}
    client:visible
  />
</Page>
